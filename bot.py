#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Maintenance Bot
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö

GitHub: https://github.com/asbtlt/telegram-maintenance-bot
License: MIT
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timezone, timedelta
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import json
import aiofiles
import html

__version__ = "1.0.0"
__author__ = "Your Name"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(
        f'logs/maintenance_bot_{datetime.now().strftime("%Y%m%d")}.log', 
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logging.getLogger(__name__)

log = setup_logging()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    config = {
        'BOT_TOKEN': os.getenv('MAINTENANCE_BOT_TOKEN'),
        'ADMIN_IDS': [],
        'MAINTENANCE_REASON': os.getenv('MAINTENANCE_REASON', 
            "–ü—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø–ª–∞–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞."),
        'MAINTENANCE_END_TIME': os.getenv('MAINTENANCE_END_TIME'),
    }
    
    # –ü–∞—Ä—Å–∏–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids_str = os.getenv('ADMIN_IDS', '')
    if admin_ids_str:
        try:
            config['ADMIN_IDS'] = [int(x.strip()) for x in admin_ids_str.split(',') if x.strip()]
        except ValueError as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_IDS: {e}")
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not config['BOT_TOKEN'] or config['BOT_TOKEN'] == 'YOUR_MAINTENANCE_BOT_TOKEN':
        log.error("MAINTENANCE_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        sys.exit(1)
    
    if not config['ADMIN_IDS']:
        log.error("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(1)
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if config['MAINTENANCE_END_TIME']:
        try:
            config['MAINTENANCE_END_TIME'] = datetime.fromisoformat(config['MAINTENANCE_END_TIME'])
        except ValueError:
            log.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAINTENANCE_END_TIME, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
            config['MAINTENANCE_END_TIME'] = None
    
    return config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()
BOT_TOKEN = config['BOT_TOKEN']
ADMIN_IDS = config['ADMIN_IDS']
MAINTENANCE_END_TIME = config['MAINTENANCE_END_TIME']
MAINTENANCE_REASON = config['MAINTENANCE_REASON']

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
stats = {
    'total_users': 0,
    'start_time': datetime.now(timezone.utc),
    'user_requests': {},
    'version': __version__
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = AsyncTeleBot(BOT_TOKEN)

# –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
MESSAGES = {
    'ru': {
        'maintenance': """üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}

<b>–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {end_time}

–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!

<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.</i>""",
        
        'no_end_time': """üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}

–†–∞–±–æ—Ç—ã –≤–µ–¥—É—Ç—Å—è –≤ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.

<i>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>""",
        
        'admin_stats': """üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç</b>

<b>–í–µ—Ä—Å–∏—è:</b> {version}
<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> {start_time}
<b>–û–±—Ä–∞—â–µ–Ω–∏–π –≤—Å–µ–≥–æ:</b> {total_requests}
<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {unique_users}

<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º:</b>
{top_users}

<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
{hourly_stats}""",
        
        'maintenance_updated': "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        'invalid_time_format': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM",
        'help_admin': """üîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
/set_end_time YYYY-MM-DD HH:MM - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
/set_reason &lt;—Ç–µ–∫—Å—Ç&gt; - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —Ç–µ—Ö—Ä–∞–±–æ—Ç
/broadcast &lt;—Å–æ–æ–±—â–µ–Ω–∏–µ&gt; - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ–±—Ä–∞—Ç–∏–≤—à–∏–º—Å—è
/clear_stats - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/version - –í–µ—Ä—Å–∏—è –±–æ—Ç–∞""",
        
        'broadcast_sent': "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        'stats_cleared': "üßπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞",
        'version_info': "ü§ñ <b>Telegram Maintenance Bot</b>\n\n<b>–í–µ—Ä—Å–∏—è:</b> {version}\n<b>–ê–≤—Ç–æ—Ä:</b> {author}"
    },
    
    'en': {
        'maintenance': """üîß <b>Maintenance Mode</b>

Sorry, the bot is temporarily unavailable.

<b>Reason:</b> {reason}

<b>Expected completion time:</b> {end_time}

We're working on improving the service. Thank you for your understanding!

<i>You will be notified when the bot is back online.</i>""",
        
        'no_end_time': """üîß <b>Maintenance Mode</b>

Sorry, the bot is temporarily unavailable.

<b>Reason:</b> {reason}

Work is being carried out in accelerated mode. The expected recovery time will be announced separately.

<i>Stay tuned for updates or try again later.</i>""",
        
        'version_info': "ü§ñ <b>Telegram Maintenance Bot</b>\n\n<b>Version:</b> {version}\n<b>Author:</b> {author}"
    }
}

def get_user_language(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ locale –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

def safe_html_format(text: str, **kwargs) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç HTML —Ç–µ–∫—Å—Ç, —ç–∫—Ä–∞–Ω–∏—Ä—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    escaped_kwargs = {}
    for key, value in kwargs.items():
        if isinstance(value, str):
            escaped_kwargs[key] = html.escape(value)
        else:
            escaped_kwargs[key] = value
    
    return text.format(**escaped_kwargs)

def format_time_remaining(end_time: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç"""
    if not end_time:
        return "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    
    now = datetime.now(timezone.utc)
    if end_time <= now:
        return "—Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è"
    
    diff = end_time - now
    hours = diff.seconds // 3600
    minutes = (diff.seconds % 3600) // 60
    
    if diff.days > 0:
        return f"—á–µ—Ä–µ–∑ {diff.days} –¥–Ω. {hours} —á."
    elif hours > 0:
        return f"—á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
    else:
        return f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."

def track_user_request(user_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    stats['total_users'] += 1
    if user_id not in stats['user_requests']:
        stats['user_requests'][user_id] = 0
    stats['user_requests'][user_id] += 1

async def save_stats():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs('data', exist_ok=True)
        stats_data = {
            **stats,
            'start_time': stats['start_time'].isoformat(),
            'maintenance_end_time': MAINTENANCE_END_TIME.isoformat() if MAINTENANCE_END_TIME else None,
            'maintenance_reason': MAINTENANCE_REASON
        }
        
        async with aiofiles.open('data/maintenance_stats.json', 'w', encoding='utf-8') as f:
            await f.write(json.dumps(stats_data, ensure_ascii=False, indent=2))
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    global MAINTENANCE_END_TIME, MAINTENANCE_REASON, stats
    
    try:
        if os.path.exists('data/maintenance_stats.json'):
            async with aiofiles.open('data/maintenance_stats.json', 'r', encoding='utf-8') as f:
                content = await f.read()
                data = json.loads(content)
                
                stats.update({
                    'total_users': data.get('total_users', 0),
                    'user_requests': data.get('user_requests', {}),
                    'start_time': datetime.fromisoformat(data.get('start_time', datetime.now(timezone.utc).isoformat())),
                    'version': __version__
                })
                
                if data.get('maintenance_end_time'):
                    MAINTENANCE_END_TIME = datetime.fromisoformat(data['maintenance_end_time'])
                
                MAINTENANCE_REASON = data.get('maintenance_reason', MAINTENANCE_REASON)
                
                log.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
async def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    user_id = message.from_user.id
    track_user_request(user_id)
    
    if user_id in ADMIN_IDS:
        await bot.reply_to(message, MESSAGES['ru']['help_admin'], parse_mode='HTML')
        return
    
    lang = get_user_language(user_id)
    
    if MAINTENANCE_END_TIME:
        end_time_str = format_time_remaining(MAINTENANCE_END_TIME)
        text = safe_html_format(MESSAGES[lang]['maintenance'], 
                              reason=MAINTENANCE_REASON,
                              end_time=end_time_str)
    else:
        text = safe_html_format(MESSAGES[lang]['no_end_time'], reason=MAINTENANCE_REASON)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status"))
    
    await bot.reply_to(message, text, parse_mode='HTML', reply_markup=keyboard)
    await save_stats()

@bot.callback_query_handler(func=lambda call: call.data == "check_status")
async def handle_status_check(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    user_id = call.from_user.id
    track_user_request(user_id)
    
    if MAINTENANCE_END_TIME:
        end_time_str = format_time_remaining(MAINTENANCE_END_TIME)
        text = f"üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è\n\n‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time_str}"
    else:
        text = "üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è\n\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
    
    await bot.answer_callback_query(call.id, text, show_alert=True)
    await save_stats()

@bot.message_handler(commands=['stats'])
async def handle_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º
    top_users = sorted(stats['user_requests'].items(), key=lambda x: x[1], reverse=True)[:5]
    top_users_text = "\n".join([f"ID {uid}: {count} –æ–±—Ä." for uid, count in top_users])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    hours_passed = (datetime.now(timezone.utc) - stats['start_time']).total_seconds() / 3600
    avg_per_hour = stats['total_users'] / max(hours_passed, 1)
    
    text = MESSAGES['ru']['admin_stats'].format(
        version=__version__,
        start_time=stats['start_time'].strftime('%d.%m.%Y %H:%M UTC'),
        total_requests=stats['total_users'],
        unique_users=len(stats['user_requests']),
        top_users=top_users_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        hourly_stats=f"–í —Å—Ä–µ–¥–Ω–µ–º: {avg_per_hour:.1f} –æ–±—Ä/—á–∞—Å"
    )
    
    await bot.reply_to(message, text, parse_mode='HTML')

@bot.message_handler(commands=['version'])
async def handle_version(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    text = MESSAGES['ru']['version_info'].format(
        version=__version__,
        author=__author__
    )
    await bot.reply_to(message, text, parse_mode='HTML')

@bot.message_handler(commands=['set_end_time'])
async def handle_set_end_time(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    global MAINTENANCE_END_TIME
    
    try:
        time_str = message.text.split(' ', 1)[1]
        MAINTENANCE_END_TIME = datetime.strptime(time_str, '%Y-%m-%d %H:%M').replace(tzinfo=timezone.utc)
        
        await bot.reply_to(message, MESSAGES['ru']['maintenance_updated'])
        await save_stats()
        
        log.info(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {MAINTENANCE_END_TIME}")
    except (IndexError, ValueError):
        await bot.reply_to(message, MESSAGES['ru']['invalid_time_format'])

@bot.message_handler(commands=['set_reason'])
async def handle_set_reason(message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ç–µ—Ö—Ä–∞–±–æ—Ç"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    global MAINTENANCE_REASON
    
    try:
        reason = message.text.split(' ', 1)[1]
        MAINTENANCE_REASON = reason
        
        await bot.reply_to(message, MESSAGES['ru']['maintenance_updated'])
        await save_stats()
        
        log.info(f"–ü—Ä–∏—á–∏–Ω–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {MAINTENANCE_REASON}")
    except IndexError:
        await bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")

@bot.message_handler(commands=['broadcast'])
async def handle_broadcast(message):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ–±—Ä–∞—Ç–∏–≤—à–∏–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        broadcast_text = message.text.split(' ', 1)[1]
        sent_count = 0
        
        for user_id in stats['user_requests'].keys():
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                try:
                    await bot.send_message(user_id, broadcast_text, parse_mode='HTML')
                except Exception:
                    # –ï—Å–ª–∏ HTML –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    await bot.send_message(user_id, broadcast_text)
                sent_count += 1
            except Exception as e:
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await bot.reply_to(message, MESSAGES['ru']['broadcast_sent'].format(count=sent_count))
        
    except IndexError:
        await bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")

@bot.message_handler(commands=['clear_stats'])
async def handle_clear_stats(message):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    global stats
    stats = {
        'total_users': 0,
        'start_time': datetime.now(timezone.utc),
        'user_requests': {},
        'version': __version__
    }
    
    await bot.reply_to(message, MESSAGES['ru']['stats_cleared'])
    await save_stats()

@bot.message_handler(func=lambda message: True)
async def handle_any_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    track_user_request(user_id)
    
    if user_id in ADMIN_IDS:
        await bot.reply_to(message, MESSAGES['ru']['help_admin'], parse_mode='HTML')
        return
    
    lang = get_user_language(user_id)
    
    if MAINTENANCE_END_TIME:
        end_time_str = format_time_remaining(MAINTENANCE_END_TIME)
        text = safe_html_format(MESSAGES[lang]['maintenance'], 
                              reason=MAINTENANCE_REASON,
                              end_time=end_time_str)
    else:
        text = safe_html_format(MESSAGES[lang]['no_end_time'], reason=MAINTENANCE_REASON)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status"))
    
    await bot.reply_to(message, text, parse_mode='HTML', reply_markup=keyboard)
    await save_stats()

async def periodic_stats_save():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    while True:
        try:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await save_stats()
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≤ periodic_stats_save: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    log.info(f"üîß –ó–∞–ø—É—Å–∫ Telegram Maintenance Bot v{__version__}...")
    log.info(f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await load_stats()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    asyncio.create_task(periodic_stats_save())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        log.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await bot.polling(non_stop=True, interval=1, timeout=60)
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
